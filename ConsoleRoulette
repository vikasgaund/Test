/* Console Roulette program */

import.java.math.BigDecimal;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicReference;

Public class Bet {

  private static final BigDecimal X36_MULTIPLIER = new BigDecimal("36");
  private static final BigDecimal X2_MULTIPLIER = new BigDecimal("2");
  private final Optional<Integer> betNumber;
  private final BigDecimal betAmount;
  private final Tyoe type;
  private static final AtomicReference<BigDecimal>> winnings = new AtomicReference<>(Optional.empty());
  private static final AtomicReference<BigDecimal>> outcome = new AtomicReference<>(Optional.empty());

    public Bet(Optional<Integer> betnumber, bigDecimal betAmount, type type) {
    this.betNumber = betNumber;
    this.betAmount= betAmount;
    this.type=type;
    
    }
    
    public Optional<BigDecimal> GetWinnings(int number) {
    switch (type) {
        case Number:
          return multiplyWinnings(betNumber.filter(n->n == number)).map(n -> betAmount), X36_MULTIPLIER);
        case ODD:
          return multiplyWinnings(Optional.of(betAmount)).filter(amount -> number % 2 !=0), X2_MULTIPLIER);
        case EVEN:
          return multiplyWinnings(Optional.of(betAmount)).filter(amount -> number % 2 ==0), X2_MULTIPLIER);
        default:
          return Optional.empty();
        
          } 
          
        }
        
     private Optional<BigDecimal> multiplyWinnings(Optional<BigDecimal> winnings, BigDecimal multiplier) {
            return winnings.map(amount-> amount.multiply(multiplier));
           
        }
    
     public BigDecimal getBetAmount() {
        return betAmount;
     }
     
     public Optional<Integer> getBetnumber() {
        return betNumber;
     }
     
     
  
    
